

.global switch_context

// 参数 x0: 当前任务的 TCB 指针
// 参数 x1: 下一个任务的 TCB 指针
switch_context:
    // 保存当前任务的上下文到 x0 指向的 TCB
    stp x19, x20, [x0, #16 * 0]    // 将 x19 和 x20 寄存器的值存储到 x0 指向的内存地址
    stp x21, x22, [x0, #16 * 1]    // 将 x21 和 x22 寄存器的值存储到 x0 + 16 * 1 的内存地址
    stp x23, x24, [x0, #16 * 2]    // 将 x23 和 x24 寄存器的值存储到 x0 + 16 * 2 的内存地址
    stp x25, x26, [x0, #16 * 3]    // 将 x25 和 x26 寄存器的值存储到 x0 + 16 * 3 的内存地址
    stp x27, x28, [x0, #16 * 4]    // 将 x27 和 x28 寄存器的值存储到 x0 + 16 * 4 的内存地址
    stp x29, x30, [x0, #16 * 5]    // 将 x29 和 x30 寄存器的值存储到 x0 + 16 * 5 的内存地址
    mov x2, sp                     // 将堆栈指针 sp 的值移动到 x2 寄存器
    str x2,       [x0, #16 * 6]          // 将 x2 寄存器的值存储到 x0 + 16 * 6 的内存地址
    str lr,       [x0, #16 * 7]          // 将链接寄存器 lr 的值存储到 x0 + 16 * 7 的内存地址

    // 加载下一个任务的上下文从 x1 指向的 TCB
    ldp x19, x20, [x1, #16 * 0]    // 从 x1 指向的内存地址加载 x19 和 x20 寄存器的值
    ldp x21, x22, [x1, #16 * 1]    // 从 x1 + 16 * 1 的内存地址加载 x21 和 x22 寄存器的值
    ldp x23, x24, [x1, #16 * 2]    // 从 x1 + 16 * 2 的内存地址加载 x23 和 x24 寄存器的值
    ldp x25, x26, [x1, #16 * 3]    // 从 x1 + 16 * 3 的内存地址加载 x25 和 x26 寄存器的值
    ldp x27, x28, [x1, #16 * 4]    // 从 x1 + 16 * 4 的内存地址加载 x27 和 x28 寄存器的值
    ldp x29, x30, [x1, #16 * 5]    // 从 x1 + 16 * 5 的内存地址加载 x29 和 x30 寄存器的值
    ldr x2,       [x1, #16 * 6]          // 从 x1 + 16 * 6 的内存地址加载 x2 寄存器的值（此时 x2 作为中间寄存器）
    mov sp, x2                     // 将 x2 寄存器的值恢复到堆栈指针 sp
    ldr lr,       [x1, #16 * 7]          // 从 x1 + 16 * 7 的内存地址加载链接寄存器 lr 的值

    ret                            // 返回，执行下一个任务

/*
stp: Store Pair of registers. 将两个寄存器的值存储到内存中。
ldp: Load Pair of registers. 从内存中加载两个寄存器的值。
str: Store Register. 将一个寄存器的值存储到内存中。
ldr: Load Register. 从内存中加载一个寄存器的值。
mov: Move Register. 将一个寄存器的值移动到另一个寄存器。
 */